<c++>
#include <fstream>
#include <iostream>
#include <stack>
#include <list>
#include <queue>
#include <algorithm>
#include <string>
#include <vector>
using namespace std;

struct Vertex
{
  string name;
  bool isVisited;
  list<int> adjacentVertices;
};

queue<int> doBreadthFirstSearch(int iOriginVertex, vector<Vertex>& database)
{
  
  queue<int> searchOrder; // return this queue of indices
  //create another queue to store "vertices to consider"
  queue<int> vertexToConsi;

  //initialize each vertex in database: set to "not visited" 
  for (int i = 0; i < database.size(); i++)
  {
	  database[i].isVisited = false;
  }

  //mark starting vertex as "visited
  database[iOriginVertex].isVisited = true;

  //push start vertex's index onto the result queue 
  searchOrder.push(iOriginVertex);

  //push start vertex's index onto "vertices to consider" queue 
  
  vertexToConsi.push(iOriginVertex);
  while (!vertexToConsi.empty())
  {
	  //peek / pop a vertex from the "vertices to consider" queue
	  int temp = vertexToConsi.front();
	  vertexToConsi.pop();
	  for (std::list<int>::iterator it = database[temp].adjacentVertices.begin(); it != database[temp].adjacentVertices.end(); ++it)
	  {

		  if (database[*it].isVisited == false)
		  {
			  database[*it].isVisited = true;
			  searchOrder.push(*it);
			  vertexToConsi.push(*it);
		  }
	  }
  }
  return searchOrder;
}

queue<int> doDepthFirstSearch(int iOriginVertex, vector<Vertex>& vertices)
{
  queue<int> searchOrder;
  //create a stack to store "vertices to consider"
  stack<int> vertexToConsi;

  //initialize each vertex in database: set to "not visited" 
  for (int i = 0; i < vertices.size(); i++)
  {
	  vertices[i].isVisited = false;
  }
  //push start vertex's index onto the "vertices to consider" stack 
  vertexToConsi.push(iOriginVertex);

  //while "vertices to consider" stack is not empty 
  while (!vertexToConsi.empty())
  {
	  //peek/pop a vertex from the "vertices to consider" stack 
	  int temp = vertexToConsi.top();
	  vertexToConsi.pop();
	  // if that vertex has not yet been visited 
	  if (vertices[temp].isVisited == false)
	  {
		  // mark the vertex as visited 
		  vertices[temp].isVisited = true;
		  //push vertex onto the result queue 
		  searchOrder.push(temp);


		  //reverse
		  vertices[temp].adjacentVertices.reverse();
		  //for each of that vertex's "neighbors" (in reverse order)
		  for (std::list<int>::iterator it = vertices[temp].adjacentVertices.begin(); it != vertices[temp].adjacentVertices.end(); ++it)
		  {
			  if (vertices[*it].isVisited == false)
			  {
				  vertexToConsi.push(*it);
			  }
		  }
	  }
  }


  return searchOrder;
}

int main()
{
  ifstream fin;
  fin.open("cities.txt");
  if (!fin.good()) throw "I/O error";  

  // process the input file
  vector<Vertex> database;
  while (fin.good()) // EOF loop
  {
    string fromCity, toCity;

    // read one edge
    getline(fin, fromCity);
    getline(fin, toCity);
    fin.ignore(1000, 10); // skip the line with distance
    fin.ignore(1000, 10); // skip the separator
    // TO DO -- code to eliminate whitespace

	fromCity.erase(remove_if(fromCity.begin(), fromCity.end(), ::isspace), fromCity.end());
	toCity.erase(remove_if(toCity.begin(), toCity.end(), ::isspace), toCity.end());

    // add vertices for new cities included in the edge
    int iToVertex = -1, iFromVertex = -1, i;
    for (i = 0; i < database.size(); i++) // seek "to" city
      if (database[i].name == fromCity)
        break;
    if (i == database.size()) // not in database yet
    {
      // store the vertex if it is new
      Vertex fromVertex;
      fromVertex.name = fromCity;
      database.push_back(fromVertex);
    }
    iFromVertex = i; 

    for (i = 0; i < database.size(); i++) // seek "from" city
      if (database[i].name == toCity)
        break;
    if (i == database.size()) // not in vector yet
    {
      // store the vertex if it is new
      Vertex toVertex;
      toVertex.name = toCity;
      database.push_back(toVertex);
    }
    iToVertex = i; 

    // store bi-directional edges
    database[iFromVertex].adjacentVertices.push_back(iToVertex);
    database[iToVertex].adjacentVertices.push_back(iFromVertex);
  }
  fin.close();
  cout << "Input file processed\n\n";

  while (true)
  {
    // get the start city for the search
	bool found = false;
	string startCity;
    cout << "\nEnter the start city [blank to exit]: ";
    getline(cin, startCity);
    if (startCity.length() == 0) break;

    // find the start city
    int i;
	for (i = 0; i < database.size(); i++)
	{

		if (strcmp(database[i].name.c_str(), startCity.c_str()) == 0)
		{
			found = true;
			break;
		}
	}
	
	if (found)
	{

		// BFS result
		cout << "BFS";
		queue<int> q = doBreadthFirstSearch(i, database);
		while (!q.empty())
		{
			cout << '-' << database[q.front()].name;
			q.pop();
		}
		cout << endl;

		cout << "DFS";
		q = doDepthFirstSearch(i, database);
		while (!q.empty())
		{
			cout << '-' << database[q.front()].name;
			q.pop();
		}
	}
    cout << endl;;
  }
}

